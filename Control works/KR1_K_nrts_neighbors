import random
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
xMin1 = 1
xMax1 = 10
yMin1 = 1
yMax1 = 10
xMin2 = 5
xMax2 = 15
yMin2 = 5
yMax2 = 15
x = []
y = []
random. seed(418)
for i in range(50):
    x.append([random.uniform(xMin1,xMax1), random.uniform(yMin1,yMax1)])
for i in range(50):
    y.append(0) 
for i in range(50):
    x.append([random.uniform(xMin2,xMax2), random.uniform(yMin2,yMax2)])
for i in range(50):
    y.append(1)
x_train, x_test, y_train, y_test = train_test_split(x, y, stratify=y, random_state=0)
neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(x_train, y_train)
y_predict = neigh.predict(x_test)
accuraccy = accuracy_score (y_test, y_predict)
fig, ax = plt.subplots()
for i in range (len(y_train)):
    if y_train[i]==0:
        ax.scatter(x_train[i][0], x_train[i][1], s=30, c='blue')
    else:
        ax.scatter(x_train[i][0], x_train[i][1], s=70, c='blue', marker = '+')
for i in range (len(y_predict)):
    if y_test[i]==y_predict[i]:
        if y_predict[i]==0:
            ax.scatter(x_test[i][0], x_test[i][1], s=30, c='green')
        else:
            ax.scatter(x_test[i][0], x_test[i][1], s=70, c='green', marker = '+')
    else:
        if y_predict[i]==0:
            ax.scatter(x_test[i][0], x_test[i][1], s=30, c='red')
        else:
            ax.scatter(x_test[i][0], x_test[i][1], s=70, c='red', marker = '+')
    
print (accuraccy)
plt.show()
