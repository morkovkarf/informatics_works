import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression

# Создаем фигуру для отображения результатов
plt.figure(figsize=(18, 25))
plt.subplots_adjust(hspace=0.4, wspace=0.3)

# Список методов классификации
methods = [
    ("K-ближайших соседей", KNeighborsClassifier(n_neighbors=3)),
    ("Метод опорных векторов", SVC(kernel='rbf', C=1.0)),
    ("Логистическая регрессия", LogisticRegression(max_iter=1000))
]

# Генерация данных
datasets_list = [
    datasets.make_circles(n_samples=500, factor=0.5, noise=0.05, random_state=30),
    datasets.make_moons(n_samples=500, noise=0.05, random_state=30),
    datasets.make_blobs(n_samples=500, cluster_std=[1.0, 0.5], random_state=30, centers=2),
    (np.dot(datasets.make_blobs(n_samples=500, random_state=170, centers=2)[0], [[0.6, -0.6], [-0.4, 0.8]]),
     datasets.make_blobs(n_samples=500, random_state=170, centers=2)[1]),
    datasets.make_blobs(n_samples=500, random_state=30, centers=2)
]

# Обработка каждого набора данных
for row, (x, y) in enumerate(datasets_list, 1):
    # Разделение данных
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

    # Создание сетки для визуализации
    temp_x = np.linspace(x[:, 0].min() - 1, x[:, 0].max() + 1, 100)
    temp_y = np.linspace(x[:, 1].min() - 1, x[:, 1].max() + 1, 100)
    xx, yy = np.meshgrid(temp_x, temp_y)

    # Обработка каждого метода
    for col, (method_name, model) in enumerate(methods, 1):
        ax = plt.subplot(5, 3, (row - 1) * 3 + col)

        # Обучение и прогнозирование
        model.fit(x_train, y_train)
        Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
        Z = Z.reshape(xx.shape)
        y_pred = model.predict(x_test)

        # Визуализация
        plt.contourf(xx, yy, Z, alpha=0.3, cmap='bwr')

        # Обучающие точки
        for i in range(len(x_train)):
            plt.scatter(x_train[i, 0], x_train[i, 1],
                        marker='x' if y_train[i] == 0 else 'o',
                        c='b', alpha=0.5)

        # Тестовые точки
        for i in range(len(x_test)):
            color = 'g' if y_test[i] == y_pred[i] else 'r'
            plt.scatter(x_test[i, 0], x_test[i, 1],
                        marker='x' if y_test[i] == 0 else 'o',
                        c=color)

        plt.title(method_name)

plt.show()
