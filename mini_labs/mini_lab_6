import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize_scalar


def gradientDescend(func=lambda x: x ** 2, diffFunc=lambda x: 2 * x, x0=3, speed=0.01, epochs=100):
    x_list = []
    y_list = []
    x = x0

    for i in range(epochs):
        x_list.append(x)
        y_list.append(func(x))
        x = x - speed * diffFunc(x)

    return x_list, y_list


# 1. Генерация дифференцируемой трансцендентно-алгебраической функции
# Функция: f(x) = e^(-x/2) + x^2
# Производная: f'(x) = -0.5*e^(-x/2) + 2*x
# Минимум находится примерно в точке x ≈ 0.23
print ("f(x) = e^(-x/2) + x^2")
def target_func(x):
    return np.exp(-x / 2) + x ** 2


def diff_func(x):
    return -0.5 * np.exp(-x / 2) + 2 * x


# Находим точный минимум для сравнения
res = minimize_scalar(target_func)
true_min_x = res.x
true_min_y = res.fun
print(f"Точный минимум функции: x = {true_min_x:.4f}, y = {true_min_y:.4f}")

# 2. Применение градиентного спуска
x_list, y_list = gradientDescend(func=target_func, diffFunc=diff_func, x0=3, speed=0.1, epochs=50)

# 3. Построение графика
x_vals = np.linspace(-1, 3, 400)
y_vals = target_func(x_vals)

plt.figure(figsize=(10, 6))
plt.plot(x_vals, y_vals)
plt.scatter(x_list, y_list, c='red', label='точки градиентного спуска')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.show()

# Проверка сходимости
final_x = x_list[-1]
final_y = y_list[-1]
print(f"Финальная точка градиентного спуска: x = {final_x:.4f}, y = {final_y:.4f}")


# 4. Поиск граничного значения speed
def find_critical_speed(func, diff_func, x0=3, epochs=50, tol=0.1):
    """
    Находит критическое значение скорости обучения, при котором метод перестает сходиться
    """
    low = 0.01
    high = 1.0
    res = minimize_scalar(func)
    true_min = res.x

    for _ in range(20):
        mid = (low + high) / 2
        x_list, _ = gradientDescend(func=func, diffFunc=diff_func, x0=x0, speed=mid, epochs=epochs)
        final_x = x_list[-1]

        if abs(final_x - true_min) < tol:
            low = mid
        else:
            high = mid

    return (low + high) / 2


critical_speed = find_critical_speed(target_func, diff_func)
print(f"Граничное значение скорости обучения: {critical_speed:.4f}")
